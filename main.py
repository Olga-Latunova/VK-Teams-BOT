import json
from bot.bot import Bot
from bot.handler import MessageHandler, BotButtonCommandHandler
import time
from datetime import datetime, timedelta
import threading
import pytz  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

TOKEN = "001.1806729577.0340071044:1011814127"  # –≤–∞—à —Ç–æ–∫–µ–Ω
TELEGRAM_CHANNEL = "https://t.me/IT_105Koderline"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
COMPANY_SITE = "https://105.ooo"  # –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

bot = Bot(token=TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
user_states = {}
tickets = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ {chat_id: [—Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤]}
events = {}   # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π {chat_id: [—Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π]}
user_context = {}  # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def back_command_button(chat_id):  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    bot.send_text(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        inline_keyboard_markup=json.dumps([
            [{"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}]
        ])
    )


def start_command_buttons(chat_id):  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_text(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        inline_keyboard_markup=json.dumps([
            [
                {"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "callbackData": "user_cmd_/contacts", "style": "primary"},
                {"text": "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "callbackData": "user_cmd_/news", "style": "primary"},
                {"text": "üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", "callbackData": "user_cmd_/about", "style": "primary"}
            ],
            [
                {"text": "üìö 1–° –î–æ–∫—É–º–µ–Ω—Ç—ã", "callbackData": "user_cmd_/1c_docs", "style": "primary"},
                {"text": "‚≠ê 1–° –û—Ç–∑—ã–≤—ã", "callbackData": "user_cmd_/1c_reviews", "style": "primary"}
            ],
            [
                {"text": "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "callbackData": "user_cmd_/support", "style": "primary"},
                {"text": "üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", "callbackData": "user_cmd_/my_tickets", "style": "primary"}
            ]
        ]),
    )


def send_welcome(chat_id):  # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ /start
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ¬´105 –ö–æ–¥–µ—Ä–ª–∞–π–Ω¬ª!\n\n"
        "–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–º–æ—á—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π 1–°\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    bot.send_text(chat_id=chat_id, text=welcome_text)
    time.sleep(0.1)
    start_command_buttons(chat_id)


def send_news(chat_id):  # –Ω–æ–≤–æ—Å—Ç–∏
    user_context[chat_id] = "news"
    time.sleep(0.3)
    bot.send_text(
        chat_id=chat_id,
        text=f"üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ:\n\n{TELEGRAM_CHANNEL}",
        inline_keyboard_markup=json.dumps([[
            {"text": "üì® –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram", "url": TELEGRAM_CHANNEL, "style": "primary"}
        ],
        [
            {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
        ]
    ]))
    time.sleep(0.1)


def send_about(chat_id):  # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    user_context[chat_id] = "about"
    time.sleep(0.3)
    about_text = (
        "üè¢ –ö–æ–º–ø–∞–Ω–∏—è ¬´105 –ö–æ–¥–µ—Ä–ª–∞–π–Ω¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è "
        "–û–≠–ó –¢–í–¢ ¬´–î—É–±–Ω–∞¬ª –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ¬´–ö–æ–¥–µ—Ä–ª–∞–π–Ω¬ª, –ø–∞—Ä—Ç–Ω–µ—Ä —Ñ–∏—Ä–º—ã 1–°, "
        "–∞ —Ç–∞–∫–∂–µ –º—ã –∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç—ã –æ—Å–æ–±–æ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∑–æ–Ω—ã —Ç–µ—Ö–Ω–∏–∫–æ-–≤–Ω–µ–¥—Ä–µ–Ω—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞ ¬´–î—É–±–Ω–∞¬ª.\n\n"
        f"üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {COMPANY_SITE}"
    )
    bot.send_text(
        chat_id=chat_id,
        text=about_text,
        inline_keyboard_markup=json.dumps([[
            {
                "text": "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                "url": COMPANY_SITE,
                "style": "primary"
            }
        ],
        [
            {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
        ]])
    )


def send_contacts(chat_id):  # –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    user_context[chat_id] = "contacts"
    time.sleep(0.3)
    contacts_text = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –æ—Ç–¥–µ–ª–∞—Ö, "
        "–¥–æ–±–∞–≤–æ—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞—Ö –∏ –ø–æ—á—Ç–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
        "‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    )
    bot.send_text(
        chat_id=chat_id,
        text=contacts_text,
        inline_keyboard_markup=json.dumps([[
            {
                "text": "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                "url": COMPANY_SITE,
                "style": "primary"
            }
        ],
        [
            {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
        ]])
    )


def send_1c_docs(chat_id):  # –¥–æ–∫–∏ 1—Å (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
    user_context[chat_id] = "1c_docs"
    """–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ 1–°"""
    docs_text = (
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ 1–°:\n\n"
        "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://1c.ru\n"
        "‚Ä¢ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: https://learning.1c.ru\n"
        "‚Ä¢ –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–æ–±–∏—è: https://solutions.1c.ru"
    )
    bot.send_text(chat_id=chat_id, text=docs_text, inline_keyboard_markup=json.dumps([
            [{"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}]
        ]))
    time.sleep(0.1)


def send_1c_reviews(chat_id):  # –æ—Ç–∑—ã–≤—ã 1—Å (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
    user_context[chat_id] = "1c_reviews"
    """–û—Ç–∑—ã–≤—ã –æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è—Ö 1–°"""
    reviews_text = (
        "‚≠ê –û—Ç–∑—ã–≤—ã –æ –Ω–∞—à–∏—Ö –≤–Ω–µ–¥—Ä–µ–Ω–∏—è—Ö 1–°:\n\n"
        "1. –û–û–û ¬´–†–æ–º–∞—à–∫–∞¬ª - –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ 1–°:ERP\n"
        "2. –ê–û ¬´–í–∞—Å–∏–ª–µ–∫¬ª - –ø–µ—Ä–µ—Ö–æ–¥ —Å 1–° 7.7 –Ω–∞ 8.3\n"
        "3. –ò–ü –ü–µ—Ç—Ä–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"
    )
    bot.send_text(chat_id=chat_id, text=reviews_text, inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))


def start_support_ticket(chat_id):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    user_states[chat_id] = {
        "state": "awaiting_ticket_subject",
        "ticket_data": {}  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –∑–¥–µ—Å—å
    }
    bot.send_text(chat_id=chat_id, text="üõ† –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
    inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))

def process_ticket_creation(chat_id, message_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    if user_states.get(chat_id, {}).get("state") == "awaiting_ticket_subject":
        user_states[chat_id]["ticket_data"]["subject"] = message_text
        user_states[chat_id]["state"] = "awaiting_ticket_description"
        bot.send_text(chat_id=chat_id, text="üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:")
    
    elif user_states.get(chat_id, {}).get("state") == "awaiting_ticket_description":
        user_states[chat_id]["ticket_data"]["description"] = message_text
        user_states[chat_id]["state"] = "awaiting_ticket_deadline"
        bot.send_text(
            chat_id=chat_id,
            text="‚è∞ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä 31.12.2023):"
        )
    
    elif user_states.get(chat_id, {}).get("state") == "awaiting_ticket_deadline":
        try:
            deadline = datetime.strptime(message_text, "%d.%m.%Y").date()
            user_states[chat_id]["ticket_data"]["deadline"] = deadline.strftime("%d.%m.%Y")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç
            if chat_id not in tickets:
                tickets[chat_id] = []
            
            ticket_id = f"TKT-{len(tickets[chat_id])+1:03d}"
            ticket_data = user_states[chat_id]["ticket_data"]
            ticket_data["id"] = ticket_id
            ticket_data["status"] = "–û—Ç–∫—Ä—ã—Ç"
            ticket_data["created_at"] = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M")
            
            tickets[chat_id].append(ticket_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
            ticket_info = (
                f"‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üîπ –ù–æ–º–µ—Ä: {ticket_id}\n"
                f"üîπ –¢–µ–º–∞: {ticket_data['subject']}\n"
                f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {ticket_data['description']}\n"
                f"üîπ –î–µ–¥–ª–∞–π–Ω: {ticket_data['deadline']}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {ticket_data['status']}\n"
                f"üîπ –°–æ–∑–¥–∞–Ω: {ticket_data['created_at']}"
            )
            
            bot.send_text(chat_id=chat_id, text=ticket_info, inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))
            user_states.pop(chat_id, None)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            time.sleep(0.5)
            
        except ValueError:
            bot.send_text(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
    


def show_my_tickets(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in tickets or not tickets[chat_id]:
        bot.send_text(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return
    
    tickets_text = "üìã –í–∞—à–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:\n\n"
    for i, ticket in enumerate(tickets[chat_id], 1):
        tickets_text += (
            f"{i}. #{ticket['id']}\n"
            f"   –¢–µ–º–∞: {ticket['subject']}\n"
            f"   –î–µ–¥–ª–∞–π–Ω: {ticket['deadline']}\n"
            f"   –°—Ç–∞—Ç—É—Å: {ticket['status']}\n\n"
        )
    
    bot.send_text(chat_id=chat_id, text=tickets_text, inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))

def start_create_event(chat_id):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    user_states[chat_id] = {
        "state": "awaiting_event_name",
        "event_data": {}  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–¥–µ—Å—å
    }
    bot.send_text(chat_id=chat_id, text="üóì –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))

def process_event_creation(chat_id, message_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    if user_states.get(chat_id, {}).get("state") == "awaiting_event_name":
        user_states[chat_id]["event_data"]["name"] = message_text
        user_states[chat_id]["state"] = "awaiting_event_description"
        bot.send_text(chat_id=chat_id, text="üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ:", inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))
    
    elif user_states.get(chat_id, {}).get("state") == "awaiting_event_description":
        user_states[chat_id]["event_data"]["description"] = message_text
        user_states[chat_id]["state"] = "awaiting_event_datetime"
        bot.send_text(
            chat_id=chat_id,
            text="‚è∞ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 31.12.2023 14:30):", inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))
    
    elif user_states.get(chat_id, {}).get("state") == "awaiting_event_datetime":
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            naive_datetime = datetime.strptime(message_text, "%d.%m.%Y %H:%M")
            event_datetime = MOSCOW_TZ.localize(naive_datetime)
            
            user_states[chat_id]["event_data"]["datetime"] = event_datetime
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            if chat_id not in events:
                events[chat_id] = []
            
            event_id = f"EVT-{len(events[chat_id])+1:03d}"
            event_data = user_states[chat_id]["event_data"]
            event_data["id"] = event_id
            event_data["status"] = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            event_data["created_at"] = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M")
            
            events[chat_id].append(event_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–±—ã—Ç–∏–∏
            event_info = (
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üîπ –ù–æ–º–µ—Ä: {event_id}\n"
                f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data['name']}\n"
                f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {event_data['description']}\n"
                f"üîπ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {event_data['status']}\n"
                f"üîπ –°–æ–∑–¥–∞–Ω–æ: {event_data['created_at']}\n\n"
                f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!"
            )
            
            bot.send_text(chat_id=chat_id, text=event_info, inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))
            user_states.pop(chat_id, None)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_time = event_datetime - timedelta(minutes=10)
            threading.Thread(
                target=schedule_reminder,
                args=(chat_id, event_id, event_data['name'], reminder_time),
                daemon=True
            ).start()
            
            time.sleep(0.5)
            
        except ValueError:
            bot.send_text(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:"
            )

def schedule_reminder(chat_id, event_id, event_name, reminder_time):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏"""
    now = datetime.now(MOSCOW_TZ)
    delay = (reminder_time - now).total_seconds()
    
    if delay > 0:
        time.sleep(delay)
        bot.send_text(
            chat_id=chat_id,
            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏!\n\n"
                 f"–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è:\n"
                 f"*{event_name}*\n\n"
                 f"ID —Å–æ–±—ã—Ç–∏—è: {event_id}", inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
    ]]))

def show_my_events(chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in events or not events[chat_id]:
        bot.send_text(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.", inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
        ]]))
        return
    
    events_text = "üóì –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for i, event in enumerate(events[chat_id], 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        event_time = event['datetime'].astimezone(MOSCOW_TZ)
        events_text += (
            f"{i}. #{event['id']}\n"
            f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {event['name']}\n"
            f"   –í—Ä–µ–º—è: {event_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"   –°—Ç–∞—Ç—É—Å: {event['status']}\n\n"
        )
    
    bot.send_text(chat_id=chat_id, text=events_text, inline_keyboard_markup=json.dumps([[
        {"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}
        ]])
    )

def show_help(chat_id):
    user_context[chat_id] = "help"
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/cancel - –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n"
        "/back - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥\n\n"
        "üîπ 1–° –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
        "/1c_docs - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ 1–°\n"
        "/1c_reviews - –û—Ç–∑—ã–≤—ã –æ –Ω–∞—à–∏—Ö –≤–Ω–µ–¥—Ä–µ–Ω–∏—è—Ö 1–°\n\n"
        "üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
        "/support - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n"
        "/my_tickets - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç–∏–∫–µ—Ç—ã\n"
        "/close_ticket - –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç\n\n"
        "üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n"
        "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–¥–º–∏–Ω—ã)\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é"
    )
    bot.send_text(chat_id=chat_id, text=help_text, inline_keyboard_markup=json.dumps([
            [{"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}]
        ]))


def cancel_current_dialog(chat_id):
    if chat_id in user_states:
        del user_states[chat_id]  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.send_text(chat_id=chat_id, text="‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.", inline_keyboard_markup=json.dumps([
            [{"text": "‚ùå –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back", "style": "secondary"}]
        ]))


def go_back(chat_id):
    if chat_id in user_states:
        state_info = user_states[chat_id]

        if state_info["state"] == "awaiting_ticket_description":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–º–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
            bot.send_text(chat_id=chat_id, text="üõ† –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:")
            state_info["state"] = "awaiting_ticket_subject"
        else:
            # –ï—Å–ª–∏ –Ω–µ—á–µ–≥–æ –æ—Ç–∫–∞—Ç—ã–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é
            bot.send_text(chat_id=chat_id, text="‚¨ÖÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥.")
            start_command_buttons(chat_id)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ –æ–∫–Ω–µ
        current_context = user_context.get(chat_id)
        if current_context:
            del user_context[chat_id]
            bot.send_text(chat_id=chat_id, text="‚¨ÖÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            start_command_buttons(chat_id)
        else:
            # –£–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ‚Äî –Ω–µ –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            start_command_buttons(chat_id)


def process_command(chat_id, command):  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    command = command.lower().strip()
    if command == "/start":
        send_welcome(chat_id)
    elif command == "/help":
        show_help(chat_id)
    elif command == "/cancel":
        cancel_current_dialog(chat_id)
    elif command == "/back":
        go_back(chat_id)
    elif command == "/news":
        send_news(chat_id)
    elif command == "/about":
        send_about(chat_id)
    elif command == "/contacts":
        send_contacts(chat_id)
    elif command == "/1c_docs":
        send_1c_docs(chat_id)
    elif command == "/1c_reviews":
        send_1c_reviews(chat_id)
    elif command == "/support":
        start_support_ticket(chat_id)
    elif command == "/my_tickets":
        show_my_tickets(chat_id)
    elif command == "/create_event":
        start_create_event(chat_id)
    elif command == "/my_events":
        show_my_events(chat_id)
    else:
        bot.send_text(chat_id=chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help")


def simulate_user_message(chat_id, text): #–∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    time.sleep(0.3)
    bot.send_text(
        chat_id=chat_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É: {text}"
    )
    time.sleep(0.3)
    process_command(chat_id, text)


def message_cb(bot, event): #–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è
    state = user_states.get(event.from_chat, {}).get("state", "")
    if state.startswith("awaiting_ticket"):
        process_ticket_creation(event.from_chat, event.text)
    elif state.startswith("awaiting_event"):
        process_event_creation(event.from_chat, event.text)
    else:
        process_command(event.from_chat, event.text)


def button_cb(bot, event): #–æ–±—Ä–∞–±–æ—Ç—á–∫–∏ –∫–Ω–æ–ø–æ–∫
    try:
        #–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        bot.answer_callback_query(
            query_id=event.data['queryId'],
            text="‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞..."
        )
        time.sleep(0.3)
        if event.data['callbackData'].startswith('user_cmd_'):
            command = event.data['callbackData'][9:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å user_cmd_
            simulate_user_message(event.from_chat, command)   
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        bot.answer_callback_query(
            query_id=event.data.get('queryId', ''),
            text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot.dispatcher.add_handler(MessageHandler(callback=message_cb))
bot.dispatcher.add_handler(BotButtonCommandHandler(callback=button_cb))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.start_polling()
bot.idle()
