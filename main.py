import json
from bot.bot import Bot
from bot.handler import MessageHandler, BotButtonCommandHandler
import time
from datetime import datetime, timedelta
import threading
import pytz  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
import re
import sqlite3
from datetime import datetime, timedelta

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tickets.db')
cursor = conn.cursor()

# –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tickets
cursor.execute("SELECT * FROM tickets")

# –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
columns = [description[0] for description in cursor.description]

# –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
print(" | ".join(columns))

# –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏
for row in cursor.fetchall():
    print(" | ".join(str(cell) for cell in row))

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn.close()
# –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

DB_FILE = 'tickets.db' 

TOKEN = "001.1806729577.0340071044:1011814127"  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
# –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é init_db() –∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ:
class Database:
    @staticmethod
    def init_db():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–∫–µ—Ç–æ–≤
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS tickets (
                id TEXT PRIMARY KEY,
                creator TEXT NOT NULL,
                assigned_to TEXT,
                assigned_to_name TEXT,
                subject TEXT NOT NULL,
                description TEXT NOT NULL,
                deadline TEXT NOT NULL,
                status TEXT NOT NULL,
                created_at TEXT NOT NULL,
                closed_at TEXT,
                closed_by TEXT,
                ticket_type TEXT
            )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_creator ON tickets(creator)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_status ON tickets(status)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_assigned ON tickets(assigned_to)')
            
            conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
Database.init_db()

# –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –∏–∑ –ë–î
def get_next_ticket_number():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT MAX(id) FROM tickets")
        result = cursor.fetchone()[0]
        if result:
            last_num = int(result.split('-')[1])
            return last_num + 1
        else:
            return 1

ticket_counter = get_next_ticket_number()

def generate_ticket_id():
    global ticket_counter
    ticket_id = f"TKT-{ticket_counter:04d}"
    ticket_counter += 1
    return ticket_id
    

ticket_counter = 1
usage_stats = {}
user_stats = {}

#–°—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
TELEGRAM_CHANNEL = "https://t.me/IT_105Koderline"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
COMPANY_SITE = "https://105.ooo"  # –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏
CONTACTS = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ ¬´105 –ö–æ–¥–µ—Ä–ª–∞–π–Ω¬ª:\n\n"
        "<b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</b>\n"
        "‚Ä¢ <b>–û–≤–æ–¥–∫–æ–≤ –í–∞—Å–∏–ª–∏–π</b> - –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä\n"
        "  –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
        "  vovodkov@koderline.com | –≤–Ω. –Ω–æ–º–µ—Ä 105\n\n"
        
        "‚Ä¢ <b>–ò–≤–∞–Ω–æ–≤–∞ –ï–ª–µ–Ω–∞</b> - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä\n"
        "  –í–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç—ã —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "  eivanova@koderline.com | –≤–Ω. –Ω–æ–º–µ—Ä 501\n\n"
        
        "<b>–û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤</b>\n"
        "‚Ä¢ <b>–†—ã–∫ –ù–∞—Ç–∞–ª—å—è</b> - –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É\n"
        "  –ü—Ä–∏—ë–º, –∞–¥–∞–ø—Ç–∞—Ü–∏—è, –ø–µ—Ä–µ–≤–æ–¥ –∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
        "  nryk@koderline.com | –≤–Ω. –Ω–æ–º–µ—Ä 502\n\n"
        
        "<b>–ò–¢ –æ—Ç–¥–µ–ª</b>\n"
        "‚Ä¢ <b>–ú–∞–ª–∏–Ω–∏–Ω –ê–ª–µ–∫—Å–µ–π</b> - —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        "  IP —Ç–µ–ª–µ—Ñ–æ–Ω–∏—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ\n"
        "  avmalinin@koderline.com | –≤–Ω. –Ω–æ–º–µ—Ä 100\n\n"
        
        "‚Ä¢ <b>–ê–±—Ä–æ—Å–∏–º–æ–≤ –ê—Ä—Ç—ë–º</b> - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∏ –∏ –°–†–ú\n"
        "  –£—á—ë—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "  aabrosimov@koderline.com\n\n"
        
        "<b>–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂</b>\n"
        "‚Ä¢ <b>–ö–æ–∂–µ–º—è–∫ –ú–∞–∫—Å–∏–º</b> - –∏.–æ. —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂\n"
        "  –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n"
        "  mkozhemyak@koderline.com | –≤–Ω. –Ω–æ–º–µ—Ä 508"
    ) #–∫–æ–Ω—Ç–∞–∫—Ç—ã
REVIEWS = "https://1c.ru/solutions/public/" #–æ—Ç–∑—ã–≤—ã
DOCS_VIDEO = "https://disk.yandex.ru/d/OTc3jOmE1Vf2Gg" #–≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
DOCS_TEXT = "https://disk.yandex.ru/d/VZC9ueCQYMGX2Q" #–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

bot = Bot(token=TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
user_states = {}
tickets = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ {chat_id: [—Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤]}
events = {}   # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π {chat_id: [—Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π]}
user_context = {}  # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
admin_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏
active_chats = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º
user_tickets = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {chat_id: [ticket_ids]}
admin_tickets = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ {chat_id: [ticket_ids]}
adm_password = str(105) # –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_users = {
    "i.osipova@bot-60.bizml.ru": "–û—Å–∏–ø–æ–≤–∞ –ò—Ä–∏–Ω–∞",
    "a.kalinin@bot-60.bizml.ru": "–ö–∞–ª–∏–Ω–∏–Ω –ê—Ä—Ç—É—Ä",
    "o.latunova@bot-60.bizml.ru": "–õ–∞—Ç—É–Ω–æ–≤–∞ –û–ª—å–≥–∞",
    "vovodkov@koderline.com": "–û–≤–æ–¥–∫–æ–≤ –í–∞—Å–∏–ª–∏–π",
    "eivanova@koderline.com": "–ò–≤–∞–Ω–æ–≤–∞ –ï–ª–µ–Ω–∞",
    "nryk@koderline.com": "–†—ã–∫ –ù–∞—Ç–∞–ª—å—è",
    "avmalinin@koderline.com": "–ú–∞–ª–∏–Ω–∏–Ω –ê–ª–µ–∫—Å–µ–π",
    "aabrosimov@koderline.com": "–ê–±—Ä–æ—Å–∏–º–æ–≤ –ê—Ä—Ç—ë–º",
    "mkozhemyak@koderline.com": "–ö–æ–∂–µ–º—è–∫ –ú–∞–∫—Å–∏–º"
}  # –°–ª–æ–≤–∞—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ {email: –∏–º—è}
#"o.latunova@bot-60.bizml.ru": "–õ–∞—Ç—É–Ω–æ–≤–∞ –û–ª—å–≥–∞",
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ç–∏–∫–µ—Ç–æ–≤
ticket_counter = 1

#–æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
back_button = {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/back"} #–∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
menu_button = {"text": "–ú–µ–Ω—é", "callbackData": "user_cmd_/back", "style": "secondary"} #–∫–Ω–æ–ø–∫–∞ "–º–µ–Ω—é"
cancel_button = {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callbackData": "user_cmd_/cancel"} #–∫–Ω–æ–ø–∫–∞ "–æ—Ç–º–µ–Ω–∞"

#–≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ (—Å–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞)
processing_time = time.sleep(0.2)



def start_command_buttons(chat_id): #–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    buttons = [
        [
            {"text": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "callbackData": "user_cmd_/contacts", "style": "primary"},
            {"text": "üì∞ –ù–æ–≤–æ—Å—Ç–∏", "callbackData": "user_cmd_/news", "style": "primary"},
            {"text": "üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏", "callbackData": "user_cmd_/about", "style": "primary"}
        ],
        [
            {"text": "üìö 1–° –î–æ–∫—É–º–µ–Ω—Ç—ã", "callbackData": "user_cmd_/1c_docs", "style": "primary"},
            {"text": "‚≠ê 1–° –û—Ç–∑—ã–≤—ã", "callbackData": "user_cmd_/1c_reviews", "style": "primary"}
        ],
        [
            {"text": "üõü –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", "callbackData": "user_cmd_/support", "style": "primary"},
            {"text": "üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", "callbackData": "user_cmd_/my_tickets", "style": "primary"}
        ],
        [
            {"text": "üóì –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "callbackData": "user_cmd_/create_event", "style": "primary"},
            {"text": "üóì –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", "callbackData": "user_cmd_/my_events", "style": "primary"}
        ],
        [
            {"text": "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callbackData": "user_cmd_/my_stats", "style": "primary"}
        ]
    ]

    if chat_id in admin_users:
        buttons.append([{"text": "üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º", "callbackData": "user_cmd_/admin_panel", "style": "attention"}])

    bot.send_text(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        inline_keyboard_markup=json.dumps(buttons)
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /my_stats
def show_my_stats(chat_id):
    try:
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
            cursor.execute('SELECT COUNT(*) FROM tickets WHERE creator = ?', (chat_id,))
            total_tickets = cursor.fetchone()[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
            cursor.execute('''
            SELECT COUNT(*) 
            FROM tickets 
            WHERE creator = ? AND status = '–û—Ç–∫—Ä—ã—Ç'
            ''', (chat_id,))
            open_tickets = cursor.fetchone()[0]
            
            bot.send_text(
                chat_id=chat_id,
                text=f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {admin_users.get(chat_id, chat_id)}\n"
                     f"üìß Email: {chat_id}\n"
                     f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_stats.get(chat_id, 0)}\n"
                     f"üé´ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
                     f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {open_tickets}",
                inline_keyboard_markup=json.dumps([[back_button]])
            )
            
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
def receiving_admin_access(chat_id, message_text): #–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–æ–ª—è (–∞ –Ω–∞–¥–æ –ª–∏?...)
    if message_text.strip() == adm_password:
        admin_users.add(chat_id)
        bot.send_text(
            chat_id=chat_id,
            text="üîì –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞!",
        )
        start_command_buttons(chat_id)
        return True
    return False

def check_admin_access(chat_id): #–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤
    if chat_id in admin_users:
        return True
    return False

def send_welcome(chat_id):  # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ /start
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ¬´105 –ö–æ–¥–µ—Ä–ª–∞–π–Ω¬ª!\n\n"
        "–Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–º–æ—á—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π 1–°\n"
        "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )
    bot.send_text(chat_id=chat_id, text=welcome_text)
    processing_time
    start_command_buttons(chat_id)

def send_news(chat_id):  # –Ω–æ–≤–æ—Å—Ç–∏
    user_context[chat_id] = "news"
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text=f"üì¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω–∞—à–µ–º Telegram-–∫–∞–Ω–∞–ª–µ:\n\n{TELEGRAM_CHANNEL}",
        inline_keyboard_markup=json.dumps([[{"text": "üì® –ü–µ—Ä–µ–π—Ç–∏ –≤ Telegram", "url": TELEGRAM_CHANNEL, "style": "primary"}],
        [back_button]
    ]))
    processing_time

def send_about(chat_id):  # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    user_context[chat_id] = "about"
    processing_time
    about_text = (
        "üè¢ –ö–æ–º–ø–∞–Ω–∏—è ¬´105 –ö–æ–¥–µ—Ä–ª–∞–π–Ω¬ª —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è "
        "–û–≠–ó –¢–í–¢ ¬´–î—É–±–Ω–∞¬ª –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ ¬´–ö–æ–¥–µ—Ä–ª–∞–π–Ω¬ª, –ø–∞—Ä—Ç–Ω–µ—Ä —Ñ–∏—Ä–º—ã 1–°, "
        "–∞ —Ç–∞–∫–∂–µ –º—ã –∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç—ã –æ—Å–æ–±–æ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –∑–æ–Ω—ã —Ç–µ—Ö–Ω–∏–∫–æ-–≤–Ω–µ–¥—Ä–µ–Ω—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞ ¬´–î—É–±–Ω–∞¬ª.\n\n"
        f"üåê –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {COMPANY_SITE}"
    )
    bot.send_text(
        chat_id=chat_id,
        text=about_text,
        inline_keyboard_markup=json.dumps([[
            {
                "text": "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                "url": COMPANY_SITE,
                "style": "primary"
            }
        ],
        [back_button]])
    )

def send_contacts(chat_id):  # –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    user_context[chat_id] = "contacts"
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text=CONTACTS,
        parse_mode="HTML",
        inline_keyboard_markup=json.dumps([
            [
                {
                    "text": "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                    "url": COMPANY_SITE,
                    "style": "primary"
                }
            ],
            [back_button]
        ])
    )
    processing_time
    start_command_buttons(chat_id)

def send_1c_docs(chat_id):  #–¥–æ–∫–∏ 1—Å
    user_context[chat_id] = "1c_docs"
    docs_text = (
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ 1–°:\n\n"
        f"‚Ä¢ –û–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º - {DOCS_VIDEO}\n"
        f"‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º - {DOCS_TEXT}"
    )
    processing_time
    bot.send_text(chat_id=chat_id, text=docs_text, inline_keyboard_markup=json.dumps([[back_button]]))

def send_1c_reviews(chat_id):  #–æ—Ç–∑—ã–≤—ã 1–°
    user_context[chat_id] = "1c_reviews"
    reviews_text = f"‚≠ê –û—Ç–∑—ã–≤—ã –æ –Ω–∞—à–∏—Ö –≤–Ω–µ–¥—Ä–µ–Ω–∏—è—Ö 1–°:\n\n{REVIEWS}"
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text=reviews_text,
        inline_keyboard_markup=json.dumps([
            [{   "text": "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∑—ã–≤–∞–º", "url": REVIEWS, "style": "primary"}],
            [back_button]
        ])
    )

def start_support_ticket(chat_id): #—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    user_states[chat_id] = {
        "state": "awaiting_ticket_subject",
        "ticket_data": {
            "creator": chat_id,
            "assigned_to": None
        }
    }
    time.sleep(0.2)
    bot.send_text(
        chat_id=chat_id, 
        text="üõ† –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞\n\n–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        inline_keyboard_markup=json.dumps([[back_button]])
    )


def process_ticket_creation(chat_id, message_text): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message_text.strip().lower() in ("/cancel", "/back"):
        user_states.pop(chat_id, None)
        bot.send_text(chat_id=chat_id, text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return

    state = user_states.get(chat_id, {}).get("state")
    ticket_data = user_states.get(chat_id, {}).get("ticket_data", {})

    if not state or not ticket_data:
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    if state == "awaiting_ticket_subject":
        if not message_text.strip():
            bot.send_text(chat_id=chat_id, text="‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return
        ticket_data["subject"] = message_text.strip()
        user_states[chat_id]["state"] = "awaiting_ticket_description"
        time.sleep(0.2)
        bot.send_text(
            chat_id=chat_id, 
            text="üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:", 
            inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
        )

    elif state == "awaiting_ticket_description":
        if not message_text.strip():
            bot.send_text(chat_id=chat_id, text="‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        ticket_data["description"] = message_text.strip()
        user_states[chat_id]["state"] = "awaiting_ticket_deadline"
        time.sleep(0.2)
        bot.send_text(
            chat_id=chat_id,
            text="‚è∞ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä 31.12.2023):", 
            inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
        )

    elif state == "awaiting_ticket_deadline":
        try:
            deadline = datetime.strptime(message_text, "%d.%m.%Y").date()
            ticket_data["deadline"] = deadline.strftime("%d.%m.%Y")
            user_states[chat_id]["state"] = "awaiting_ticket_admin"

            admin_buttons = [{
                "text": "üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±–µ", 
                "callbackData": "assign_ticket_self"
            }]

            for email, name in admin_users.items():
                if email != chat_id:
                    admin_buttons.append({
                        "text": f"üë§ {name}",
                        "callbackData": f"assign_ticket_{email}"
                    })

            keyboard = [admin_buttons[i:i + 2] for i in range(0, len(admin_buttons), 2)]
            keyboard.append([back_button, cancel_button])

            time.sleep(0.2)
            bot.send_text(
                chat_id=chat_id,
                text="üë• –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–∫–µ—Ç:",
                inline_keyboard_markup=json.dumps(keyboard)
            )

        except ValueError:
            time.sleep(0.2)
            bot.send_text(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )

def assign_ticket(chat_id, admin_id):
    if chat_id not in user_states:
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    ticket_data = user_states[chat_id]["ticket_data"]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if admin_id == "self":
        ticket_data.update({
            "ticket_type": "personal",
            "assigned_to": chat_id,
            "assigned_to_name": "–°–µ–±–µ"
        })
    else:
        ticket_data.update({
            "ticket_type": "assigned",
            "assigned_to": admin_id,
            "assigned_to_name": admin_users.get(admin_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        })
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏ –¥–∞—Ç—ã
    ticket_id = generate_ticket_id()
    created_at = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π ID
    try:
        with sqlite3.connect(DB_FILE) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT 1 FROM tickets WHERE id = ?', (ticket_id,))
            if cursor.fetchone():
                print(f"–û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç —Å ID {ticket_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–ª–∏–∫—Ç ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            cursor.execute('''
            INSERT INTO tickets VALUES (
                :id, :creator, :assigned_to, :assigned_to_name, :subject,
                :description, :deadline, :status, :created_at,
                :closed_at, :closed_by, :ticket_type
            )
            ''', {
                "id": ticket_id,
                "creator": ticket_data["creator"],
                "assigned_to": ticket_data["assigned_to"],
                "assigned_to_name": ticket_data["assigned_to_name"],
                "subject": ticket_data["subject"],
                "description": ticket_data["description"],
                "deadline": ticket_data["deadline"],
                "status": "–û—Ç–∫—Ä—ã—Ç",
                "created_at": created_at,
                "closed_at": None,
                "closed_by": None,
                "ticket_type": ticket_data["ticket_type"]
            })
            conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞")
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if ticket_data["ticket_type"] == "assigned":
        try:
            bot.send_text(
                chat_id=admin_id,
                text=(
                    f"üîî –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç!\n\n"
                    f"üîπ –ù–æ–º–µ—Ä: {ticket_id}\n"
                    f"üîπ –û—Ç: {admin_users.get(chat_id, chat_id)}\n"
                    f"üîπ –¢–µ–º–∞: {ticket_data['subject']}\n"
                    f"üîπ –î–µ–¥–ª–∞–π–Ω: {ticket_data['deadline']}\n\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ticket_data['description']}"
                ),
                inline_keyboard_markup=json.dumps([
                    [
                        {"text": "üõ† –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "callbackData": f"view_ticket_{ticket_id}"},
                        {"text": "‚úÖ –ó–∞–∫—Ä—ã—Ç—å", "callbackData": f"admin_cmd_close_ticket_{ticket_id}"}
                    ]
                ])
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é
    bot.send_text(
        chat_id=chat_id,
        text=(
            f"‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üîπ –ù–æ–º–µ—Ä: {ticket_id}\n"
            f"üîπ –ù–∞–∑–Ω–∞—á–µ–Ω: {ticket_data['assigned_to_name']}\n"
            f"üîπ –¢–µ–º–∞: {ticket_data['subject']}\n"
            f"üîπ –î–µ–¥–ª–∞–π–Ω: {ticket_data['deadline']}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã'"
        ),
        inline_keyboard_markup=json.dumps([
            [{"text": "üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", "callbackData": "user_cmd_/my_tickets", "style": "primary"}],
            [menu_button]
        ])
    )

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states.pop(chat_id, None)

def show_user_tickets(chat_id):
    try:
            conn = sqlite3.connect(DB_FILE)
            conn.row_factory = sqlite3.Row  
            cursor = conn.cursor()
            cursor.execute('''
            SELECT id, subject, status, assigned_to_name 
            FROM tickets 
            WHERE creator = ?
            ORDER BY created_at DESC
            ''', (chat_id,))
            
            tickets = cursor.fetchall()
            
            if not tickets:
                bot.send_text(chat_id=chat_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
                return
            
            keyboard = []
            for ticket in tickets:
                row = [{
                    "text": f"{ticket['id']}: {ticket['subject']} ({ticket['status']})",
                    "callbackData": f"view_ticket_{ticket['id']}"
                }]
                
                if ticket['status'] == "–û—Ç–∫—Ä—ã—Ç" and ticket['assigned_to_name'] == "–°–µ–±–µ":
                    row.append({
                        "text": "‚úÖ –ó–∞–∫—Ä—ã—Ç—å",
                        "callbackData": f"close_ticket_{ticket['id']}"
                    })
                
                keyboard.append(row)
            
            keyboard.append([back_button])
            
            bot.send_text(
                chat_id=chat_id,
                text="üìã –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:",
                inline_keyboard_markup=json.dumps(keyboard)
            )
            
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤")

def show_admin_tickets(chat_id):
    try:
            conn = sqlite3.connect(DB_FILE)
            conn.row_factory = sqlite3.Row  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
            cursor = conn.cursor()
            
            cursor.execute('''
            SELECT id, subject, status 
            FROM tickets 
            WHERE assigned_to = ? AND status = '–û—Ç–∫—Ä—ã—Ç'
            ORDER BY created_at DESC
            ''', (chat_id,))
            
            admin_tickets = cursor.fetchall()
            
            if not admin_tickets:
                bot.send_text(chat_id=chat_id, text="‚ùå –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤–∞–º —Ç–∏–∫–µ—Ç–æ–≤.")
                return
            
            keyboard = []
            for ticket in admin_tickets:
                keyboard.append([
                    {
                        "text": f"{ticket['id']}: {ticket['subject']}",
                        "callbackData": f"view_ticket_{ticket['id']}"
                    },
                    {
                        "text": "‚úÖ –ó–∞–∫—Ä—ã—Ç—å",
                        "callbackData": f"admin_cmd_close_ticket_{ticket['id']}"
                    }
                ])
            
            keyboard.append([back_button])
            
            bot.send_text(
                chat_id=chat_id,
                text="üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º —Ç–∏–∫–µ—Ç—ã:",
                inline_keyboard_markup=json.dumps(keyboard))
                
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤")
def show_ticket_info(chat_id, ticket_id):
    try:
            conn = sqlite3.connect(DB_FILE)
            conn.row_factory = sqlite3.Row  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM tickets WHERE id = ?', (ticket_id,))
            ticket = cursor.fetchone()
            
            if not ticket:
                bot.send_text(chat_id=chat_id, text="‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            info_text = (
                f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ç–µ #{ticket['id']}:\n\n"
                f"üîπ –¢–µ–º–∞: {ticket['subject']}\n"
                f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {ticket['description']}\n"
                f"üîπ –î–µ–¥–ª–∞–π–Ω: {ticket['deadline']}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {ticket['status']}\n"
                f"üîπ –°–æ–∑–¥–∞–Ω: {ticket['created_at']}\n"
                f"üîπ –°–æ–∑–¥–∞—Ç–µ–ª—å: {admin_users.get(ticket['creator'], ticket['creator'])}\n"
                f"üîπ –ù–∞–∑–Ω–∞—á–µ–Ω: {ticket['assigned_to_name']}\n"
                f"üîπ –ó–∞–∫—Ä—ã—Ç: {ticket['closed_at'] if ticket['closed_at'] else '‚Äî'}"
            )
            
            keyboard = []
            can_close = (
                chat_id in admin_users or 
                (ticket['creator'] == chat_id and ticket['assigned_to_name'] == "–°–µ–±–µ" and ticket['status'] == "–û—Ç–∫—Ä—ã—Ç")
            )
            
            if can_close and ticket['status'] == "–û—Ç–∫—Ä—ã—Ç":
                keyboard.append([{
                    "text": "‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
                    "callbackData": f"close_ticket_{ticket['id']}"
                }])
            
            keyboard.append([back_button])
            
            bot.send_text(
                chat_id=chat_id,
                text=info_text,
                inline_keyboard_markup=json.dumps(keyboard))
                
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ")


def delete_ticket(ticket_id):
    conn = sqlite3.connect('tickets.db')
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM tickets WHERE id = ?', (ticket_id,))
    conn.commit()
    conn.close()

def close_ticket(chat_id, ticket_id):
    try:
        with sqlite3.connect(DB_FILE) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞
            cursor.execute('''
            SELECT creator, assigned_to_name, status, subject 
            FROM tickets 
            WHERE id = ?
            ''', (ticket_id,))
            ticket = cursor.fetchone()
            
            if not ticket:
                bot.send_text(chat_id=chat_id, text="‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ
            if (chat_id not in admin_users and 
                (ticket['creator'] != chat_id or ticket['assigned_to_name'] != "–°–µ–±–µ")):
                bot.send_text(chat_id=chat_id, text="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            closed_at = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M")
            cursor.execute('''
            UPDATE tickets 
            SET status = '–ó–∞–∫—Ä—ã—Ç', closed_at = ?, closed_by = ?
            WHERE id = ?
            ''', (closed_at, chat_id, ticket_id))
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª –Ω–µ –æ–Ω —Å–∞–º)
            if ticket['creator'] != chat_id:
                try:
                    bot.send_text(
                        chat_id=ticket['creator'],
                        text=(
                            f"üîî –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç!\n\n"
                            f"üîπ –¢–µ–º–∞: {ticket['subject']}\n"
                            f"üîπ –ó–∞–∫—Ä—ã—Ç: {closed_at}\n"
                            f"üîπ –ó–∞–∫—Ä—ã–ª: {admin_users.get(chat_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')}"
                        ),
                        inline_keyboard_markup=json.dumps([[back_button]])
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è: {e}")
            
            bot.send_text(
                chat_id=chat_id,
                text=f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.",
                inline_keyboard_markup=json.dumps([[back_button]])
            )
            
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_text(chat_id=chat_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞")
        
def start_create_event(chat_id): #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    user_states[chat_id] = {
        "state": "awaiting_event_name",
        "event_data": {}
    }
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text="üóì –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è\n–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
        )

def process_event_creation(chat_id, message_text): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è

    if user_states.get(chat_id, {}).get("state") == "awaiting_event_name":
        user_states[chat_id]["event_data"]["name"] = message_text
        user_states[chat_id]["state"] = "awaiting_event_description"
        processing_time
        bot.send_text(
            chat_id=chat_id,
            text="üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ:",
            inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
        )
    
    elif user_states.get(chat_id, {}).get("state") == "awaiting_event_description":
        user_states[chat_id]["event_data"]["description"] = message_text
        user_states[chat_id]["state"] = "awaiting_event_datetime"
        processing_time
        bot.send_text(
            chat_id=chat_id,
            text="‚è∞ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
            inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
        )
    
    elif user_states.get(chat_id, {}).get("state") == "awaiting_event_datetime":
        try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            naive_datetime = datetime.strptime(message_text, "%d.%m.%Y %H:%M")
            event_datetime = MOSCOW_TZ.localize(naive_datetime)
            user_states[chat_id]["event_data"]["datetime"] = event_datetime

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text="‚è∞ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?\n"
                    "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–î:–ß–ß:–ú–ú:–°–°\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 0:02:30:00 ‚Äî –∑–∞ 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç",
                inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
            )

            user_states[chat_id]["state"] = "awaiting_event_reminder"
        except ValueError:
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:"
            )
    elif user_states.get(chat_id, {}).get("state") == "awaiting_event_reminder":
        time_format_pattern = r"^\d+:\d{2}:\d{2}:\d{2}$"
        if not re.match(time_format_pattern, message_text):
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î:–ß–ß:–ú–ú:–°–°\n"
                     "–ü—Ä–∏–º–µ—Ä: 0:00:10:30 ‚Äî –∑–∞ 10 –º–∏–Ω—É—Ç 30 —Å–µ–∫—É–Ω–¥"
            )
            return
        try:
            # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç –î:–ß–ß:–ú–ú:–°–°
            days, hours, minutes, seconds = map(int, message_text.split(':'))
            if any(x < 0 for x in [days, hours, minutes, seconds]):
                raise ValueError("–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")

            event_data = user_states[chat_id]["event_data"]
            event_datetime = event_data["datetime"]

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_delta = timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)
            reminder_time = event_datetime - reminder_delta

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            if chat_id not in events:
                events[chat_id] = []
            event_id = f"EVT-{len(events[chat_id]) + 1:03d}"
            event_data["id"] = event_id
            event_data["status"] = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            event_data["created_at"] = datetime.now(MOSCOW_TZ).strftime("%d.%m.%Y %H:%M")
            events[chat_id].append(event_data)

            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            event_info = (
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_data['name']}\n"
                f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {event_data['description']}\n"
                f"üîπ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üîî –ù–∞–ø–æ–º–Ω—é –∑–∞ {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            )

            processing_time
            bot.send_text(chat_id=chat_id, text=event_info,
                inline_keyboard_markup=json.dumps([[back_button]])
            )

            # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            threading.Thread(
                target=schedule_reminder,
                args=(chat_id, event_id, event_data['name'], reminder_time),
                daemon=True
            ).start()

            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states.pop(chat_id, None)
        except Exception as e:
            print(e)
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î:–ß–ß:–ú–ú:–°–°\n")
               
def schedule_reminder(chat_id, event_id, event_name, reminder_time): #–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏
        now = datetime.now(MOSCOW_TZ)
        delay = (reminder_time - now).total_seconds()
        if delay > 0:
            time.sleep(delay)
            bot.send_text(
                chat_id=chat_id,
                text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏!\n"
                    f"–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞—á–Ω—ë—Ç—Å—è:\n"
                    f"*{event_name}*\n"
                    f"ID —Å–æ–±—ã—Ç–∏—è: {event_id}",
                inline_keyboard_markup=json.dumps([[back_button]])
            )

def show_my_events(chat_id): #—Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id not in events or not events[chat_id]:
        processing_time
        bot.send_text(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.", 
            inline_keyboard_markup=json.dumps([[back_button]])
        )
        return
    
    events_text = "üóì –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for i, event in enumerate(events[chat_id], 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        event_time = event['datetime'].astimezone(MOSCOW_TZ)
        events_text += (
            f"{i}. #{event['id']}\n"
            f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {event['name']}\n"
            f"   –í—Ä–µ–º—è: {event_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"   –°—Ç–∞—Ç—É—Å: {event['status']}\n\n"
        )
    
    processing_time
    bot.send_text(chat_id=chat_id, text=events_text, 
        inline_keyboard_markup=json.dumps([[back_button]])
    )

def show_help(chat_id): #–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help
    user_context[chat_id] = "help"
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/cancel - –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥\n"
        "/back - –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\n\n"
        "üîπ 1–° –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
        "/1c_docs - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ 1–°\n"
        "/1c_reviews - –û—Ç–∑—ã–≤—ã –æ –Ω–∞—à–∏—Ö –≤–Ω–µ–¥—Ä–µ–Ω–∏—è—Ö 1–°\n\n"
        "üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
        "/support - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n"
        "/my_tickets - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç–∏–∫–µ—Ç—ã\n"
        "/close_ticket - –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç\n\n"
        "üîπ –°–æ–±—ã—Ç–∏—è:\n"
        "/create_event - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n"
        "/my_events - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Å–æ–±—ã—Ç–∏—è\n"
        "üîπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n"
        "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é"
    )
    processing_time
    bot.send_text(chat_id=chat_id, text=help_text)
    start_command_buttons(chat_id)

def cancel_current_dialog(chat_id): #???–≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞??? –Ω–µ –≤–∏–∂—É —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º
    if chat_id in user_states:
        del user_states[chat_id]  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    processing_time
    bot.send_text(chat_id=chat_id, text="‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.", 
        inline_keyboard_markup=json.dumps([[back_button]])
    )

def show_admin_panel(chat_id): #–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        inline_keyboard_markup=json.dumps([
            [
                {"text": "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "callbackData": "admin_cmd_broadcast", "style": "attention"},
                {"text": "üìä –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callbackData": "admin_cmd_all_stats", "style": "primary"}
            ],
            [back_button]
        ])
    )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def show_all_stats(chat_id):
    try:
        conn = sqlite3.connect('tickets.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('SELECT COUNT(*) FROM tickets')
        total_tickets = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM tickets WHERE status = "–û—Ç–∫—Ä—ã—Ç"')
        open_tickets = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor.execute('''
        SELECT creator, COUNT(*) as ticket_count
        FROM tickets
        GROUP BY creator
        ORDER BY ticket_count DESC
        ''')
        user_stats = cursor.fetchall()
        
        stats_text = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        stats_text += f"üîπ –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
        stats_text += f"üîπ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {open_tickets}\n\n"
        stats_text += "üìå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
        
        for user, count in user_stats:
            stats_text += f"üë§ {admin_users.get(user, user)}: {count} —Ç–∏–∫–µ—Ç–æ–≤\n"
        
        bot.send_text(
            chat_id=chat_id,
            text=stats_text,
            inline_keyboard_markup=json.dumps([[back_button]])
        )
        
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        bot.send_text(
            chat_id=chat_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        )
        
    finally:
        if conn:
            conn.close()

def show_user_stats_options(chat_id):
    if not admin_users:
        bot.send_text(chat_id=chat_id, text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return
    
    keyboard = []
    admin_list = list(admin_users.items())
    
    for i in range(0, len(admin_list), 2):
        row = []
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
        email, name = admin_list[i]
        count = user_stats.get(email, 0)
        open_tickets = len([t for t in tickets.values() if t.get("creator") == email and t.get("status") == "–û—Ç–∫—Ä—ã—Ç"])
        row.append({
            "text": f"{name} ({count}|{open_tickets}üé´)",
            "callbackData": f"show_user_detail_{email}"
        })
        
        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i+1 < len(admin_list):
            email, name = admin_list[i+1]
            count = user_stats.get(email, 0)
            open_tickets = len([t for t in tickets.values() if t.get("creator") == email and t.get("status") == "–û—Ç–∫—Ä—ã—Ç"])
            row.append({
                "text": f"{name} ({count}|{open_tickets}üé´)",
                "callbackData": f"show_user_detail_{email}"
            })
        
        keyboard.append(row)
    
    keyboard.append([back_button])
    
    bot.send_text(
        chat_id=chat_id,
        text="üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–ø—Ä–æ—Å—ã|–æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã):",
        inline_keyboard_markup=json.dumps(keyboard)
    )

def show_all_users_stats(chat_id):
    if not admin_users:
        bot.send_text(chat_id=chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return
    
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for email, name in admin_users.items():
        count = usage_stats.get(email, {}).get('count', 0) if usage_stats else 0
        stats_text += f"üë§ {name}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    bot.send_text(
        chat_id=chat_id,
        text=stats_text,
        inline_keyboard_markup=json.dumps([
            [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callbackData": "admin_cmd_user_stats"}]
        ])
    )

def show_user_detail(chat_id, user_email):
    if user_email not in admin_users:
        bot.send_text(chat_id=chat_id, text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    name = admin_users[user_email]
    count = user_stats.get(user_email, 0)
    # –°—á–∏—Ç–∞–µ–º —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    created_tickets = len([t for t in tickets.values() if t.get("creator") == user_email])
    open_tickets = len([t for t in tickets.values() if t.get("creator") == user_email and t.get("status") == "–û—Ç–∫—Ä—ã—Ç"])
    assigned_tickets = len([t for t in tickets.values() if t.get("assigned_to") == user_email and t.get("status") == "–û—Ç–∫—Ä—ã—Ç"])
    
    bot.send_text(
        chat_id=chat_id,
        text=f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
             f"üë§ –ò–º—è: {name}\n"
             f"üìß Email: {user_email}\n"
             f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {count}\n"
             f"üé´ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: {created_tickets}\n"
             f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {open_tickets}\n"
             f"üìå –ù–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤: {assigned_tickets}",
        inline_keyboard_markup=json.dumps([
            [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "callbackData": "admin_cmd_user_stats"}]
        ])
    )

def show_all_users_stats(chat_id):
    if not usage_stats:
        bot.send_text(chat_id=chat_id, text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        return
    
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, stats in sorted(usage_stats.items(), key=lambda x: x[1]['count'], reverse=True):
        stats_text += f"üë§ {stats['name']}: {stats['count']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
    
    bot.send_text(
        chat_id=chat_id,
        text=stats_text,
        inline_keyboard_markup=json.dumps([
            [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callbackData": "admin_cmd_user_stats"}]
        ])
    )

def start_broadcast(chat_id): #—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if chat_id not in admin_users:
        processing_time
        bot.send_text(chat_id=chat_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    user_states[chat_id] = {
        "state": "awaiting_broadcast_message",
        "broadcast_data": {}
    }

    processing_time
    bot.send_text(
        chat_id=chat_id,
        text="üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        inline_keyboard_markup=json.dumps([
            [{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callbackData": "admin_cmd_cancel_broadcast", "style": "secondary"}]
        ])
    )

def process_broadcast(chat_id, message_text): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if chat_id not in admin_users:
        processing_time
        bot.send_text(chat_id=chat_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    user_states[chat_id]["broadcast_data"]["message"] = message_text
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text=f"‚úâÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n{message_text}",
        inline_keyboard_markup=json.dumps([
            [
                {"text": "‚úÖ –î–∞, —Ä–∞–∑–æ—Å–ª–∞—Ç—å", "callbackData": "admin_cmd_confirm_broadcast", "style": "attention"},
                {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callbackData": "admin_cmd_cancel_broadcast", "style": "secondary"}
            ]
        ])
    )

def send_broadcast(chat_id): #–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if chat_id not in admin_users:
        processing_time
        bot.send_text(chat_id=chat_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    broadcast_data = user_states[chat_id]["broadcast_data"]
    message = broadcast_data["message"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Ç–∞–º
    for user_chat in active_chats:
        try:
            processing_time
            bot.send_text(
                chat_id=user_chat,
                text=f"üì¢ –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message}",
                inline_keyboard_markup=json.dumps([
                    [back_button]
                ])
            )
            processing_time # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_chat}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text=f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(active_chats)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        inline_keyboard_markup=json.dumps([
            [{"text": "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "callbackData": "user_cmd_/admin_panel", "style": "secondary"}]
        ])
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_states[chat_id]

def cancel_broadcast(chat_id): #–æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    if chat_id in user_states and user_states[chat_id].get("state") == "awaiting_broadcast_message":
        del user_states[chat_id]
    
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        inline_keyboard_markup=json.dumps([
            [{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callbackData": "user_cmd_/admin_panel", "style": "secondary"}]
        ])
    )

def go_back(chat_id): #–∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥"
     # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞/—Å–æ–±—ã—Ç–∏—è)
    if chat_id in user_states:
        state_info = user_states[chat_id]
        state = state_info.get("state", "")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        if state == "awaiting_ticket_description":
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text="üõ† –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
                inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
            )
            state_info["state"] = "awaiting_ticket_subject"

        elif state == "awaiting_ticket_deadline":
            subject = state_info["ticket_data"].get("subject", "")
            description = state_info["ticket_data"].get("description", "")
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text=f"üõ† –¢–µ–º–∞: {subject}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n–ò–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:",
                inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
            )
            state_info["state"] = "awaiting_ticket_description"

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        elif state == "awaiting_event_description":
            name = state_info["event_data"].get("name", "")
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text=f"üóì –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n(–±—ã–ª–æ: {name})",
                inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
            )
            state_info["state"] = "awaiting_event_name"

        elif state == "awaiting_event_reminder":
            name = state_info["event_data"].get("name", "")
            description = state_info["event_data"].get("description", "")
            datetime_str = state_info["event_data"]["datetime"].strftime("%d.%m.%Y %H:%M")
            processing_time
            bot.send_text(
                chat_id=chat_id,
                text=f"üóì –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                     f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime_str}\n–ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:",
                inline_keyboard_markup=json.dumps([[back_button, cancel_button]])
            )
            state_info["state"] = "awaiting_event_datetime"

        # –î–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        else:
            user_states.pop(chat_id, None)
            processing_time
            start_command_buttons(chat_id)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–¥–µ–ª–æ–≤)
    elif chat_id in user_context:
        del user_context[chat_id]
        processing_time
        start_command_buttons(chat_id)

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        processing_time
        start_command_buttons(chat_id)

def process_command(chat_id, command): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    command = command.lower().strip()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if chat_id in user_states and user_states[chat_id].get("state", "").startswith("awaiting_ticket"):
        if not command.startswith("/support") and command not in ["/back", "/cancel"]:
            del user_states[chat_id]
            bot.send_text(chat_id=chat_id, text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã
    if chat_id in user_states and user_states[chat_id].get("state", "").startswith("awaiting_event"):
        if not command.startswith("/create_event") and command not in ["/back", "/cancel"]:
            del user_states[chat_id]
            bot.send_text(chat_id=chat_id, text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
            
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ
    user_stats[chat_id] = user_stats.get(chat_id, 0) + 1
            
    if command == "/start":
        send_welcome(chat_id)
    elif command == "/help":
        show_help(chat_id)
    elif command == "/cancel":
        cancel_current_dialog(chat_id)
    elif command == "/back":
        go_back(chat_id)
    elif command == "/news":
        send_news(chat_id)
    elif command == "/about":
        send_about(chat_id)
    elif command == "/contacts":
        send_contacts(chat_id)
    elif command == "/1c_docs":
        send_1c_docs(chat_id)
    elif command == "/1c_reviews":
        send_1c_reviews(chat_id)
    elif command == "/support":
        start_support_ticket(chat_id)
    elif command == "/my_tickets":
        if chat_id in admin_users:
            bot.send_text(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∏–∫–µ—Ç–æ–≤:",
                inline_keyboard_markup=json.dumps([
                    [
                        {"text": "üìå –ú–æ–∏ –ª–∏—á–Ω—ã–µ", "callbackData": "user_cmd_show_personal_tickets"},
                        {"text": "üíº –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–Ω–µ", "callbackData": "user_cmd_show_assigned_tickets"}
                    ],
                    [back_button]
                ])
            )
        else:
            show_user_tickets(chat_id)
    elif command == "/create_event":
        start_create_event(chat_id)
    elif command == "/my_events":
        show_my_events(chat_id)
    elif command == "/admin_panel":
        show_admin_panel(chat_id)
    elif command == "/broadcast":
        start_broadcast(chat_id)
    elif command == "/my_stats":
        show_my_stats(chat_id)
    elif command == "/stats":
        if chat_id in admin_users:
            show_all_stats(chat_id)
        else:
            show_my_stats(chat_id)
    else:
        bot.send_text(chat_id=chat_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help")

def simulate_user_message(chat_id, text): #–∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    processing_time
    bot.send_text(
        chat_id=chat_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É: {text}"
    )
    process_command(chat_id, text)

def message_cb(bot, event): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    chat_id = event.from_chat
    text = event.text.strip()
    active_chats.add(chat_id)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /) - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
    if text.startswith('/'):
        process_command(chat_id, text)
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_states.get(chat_id, {}).get("state", "")
    
    if state == "awaiting_broadcast_message":
        process_broadcast(chat_id, text)
    elif state.startswith("awaiting_ticket"):
        process_ticket_creation(chat_id, text)
    elif state.startswith("awaiting_event"):
        process_event_creation(chat_id, text)
    else:
        bot.send_text(chat_id=chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é")
        start_command_buttons(chat_id)

def button_cb(bot, event): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    try:
        bot.answer_callback_query(
            query_id=event.data['queryId'],
            text="‚åõ –û–±—Ä–∞–±–æ—Ç–∫–∞..."
        )
        time.sleep(0.1)

        chat_id = event.from_chat
        active_chats.add(chat_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
        user_stats[chat_id] = user_stats.get(chat_id, 0) + 1

        callback_data = event.data['callbackData']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        if callback_data.startswith('assign_ticket_'):
            admin_email = callback_data.replace('assign_ticket_', '')
            assign_ticket(chat_id, admin_email)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
        if callback_data.startswith('close_ticket_'):
            ticket_id = callback_data.replace('close_ticket_', '')
            close_ticket(chat_id, ticket_id)
            return

        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ
        elif callback_data.startswith('view_ticket_'):
            ticket_id = callback_data.replace('view_ticket_', '')
            show_ticket_info(chat_id, ticket_id)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        elif callback_data == "user_cmd_show_personal_tickets":
            show_user_tickets(chat_id)
            return
            
        elif callback_data == "user_cmd_show_assigned_tickets":
            show_admin_tickets(chat_id)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        elif callback_data.startswith('user_cmd_'):
            command = callback_data[9:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å user_cmd_
            process_command(chat_id, command)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        elif callback_data.startswith('admin_cmd_'):
            if chat_id not in admin_users:
                bot.send_text(chat_id=chat_id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return

            command = callback_data[10:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å admin_cmd_

            if command == "broadcast":
                start_broadcast(chat_id)
            elif command == "stats":
                show_all_stats(chat_id)
            elif command == "all_stats":
                show_all_stats(chat_id)
            elif command == "confirm_broadcast":
                send_broadcast(chat_id)
            elif command == "cancel_broadcast":
                cancel_broadcast(chat_id)
                
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        elif callback_data == "user_cmd_/my_stats":
            show_my_stats(chat_id)
        elif callback_data == "admin_cmd_all_stats":
            show_all_stats(chat_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        bot.answer_callback_query(
            query_id=event.data.get('queryId', ''),
            text="‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot.dispatcher.add_handler(MessageHandler(callback=message_cb))
bot.dispatcher.add_handler(BotButtonCommandHandler(callback=button_cb))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.start_polling()
bot.idle()